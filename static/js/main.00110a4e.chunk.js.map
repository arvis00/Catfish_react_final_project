{"version":3,"sources":["components/ContainerWithCards/ContainerWithCards.module.scss","components/Timer/Timer.module.scss","components/ContainerWithImageToFind/ContainerWithImageToFind.module.scss","components/Box/Box.module.scss","pages/Results/Results.module.scss","pages/Gameover/Gameover.module.scss","components/Slider/Slider.module.scss","components/Loader/Loader.module.scss","pages/Game/Game.module.scss","pages/Start/Start.module.scss","components/Slider/index.js","components/Slider/Slider.js","components/Button/index.js","components/Button/Button.js","redux/selectors.js","redux/actionCreators.js","redux/actionTypes.js","redux/actions.js","components/ContainerWithCards/index.js","components/ContainerWithCards/ContainerWithCards.js","components/Timer/index.js","components/Timer/Timer.js","components/ContainerWithImageToFind/index.js","components/ContainerWithImageToFind/ContainerWithImageToFind.js","components/Loader/index.js","components/Loader/Loader.js","api.js","components/Box/index.js","components/Box/Box.js","routes.js","pages/Game/Game.js","pages/Gameover/Gameover.js","pages/Results/Results.js","pages/Start/Start.js","App.js","redux/reducer-gameOptions.js","redux/reducer-timer.js","redux/store.js","index.js"],"names":["module","exports","Slider","children","padding","value","min","max","step","className","onChange","classNameText","classes","slideContainer","style","type","slider","Button","onClick","button","getNumberOfImg","state","gameOptions","numberOfImg","getTimePassedAfterStart","timer","timePassedAfterStart","getTimePassedAfterFlip","timePassedAfterFlip","getSizeOfImg","sizeOfImg","getGameMode","gameMode","getSearchValue","searchValue","getToRememberImgArray","toRememberImgArray","getToGuessImgArray","toGuessImgArray","getDataFetched","dataFetched","getSecondsToRemember","secondsToRemember","getTimerEnd","timerEnd","getFlipCards","flipCards","getSelectionCounter","selectionCounter","setGameModeAction","newData","setDataFetchedAction","setSearchValueAction","setStartTimerAction","setToGuessImgArrayAction","setToRememberImgArrayAction","setTimerEndAction","setFlipCards","setTimePassedAfterFlipAction","dispatch","getState","setTimePassedAfterStartAction","setSelectionCounterAction","increment","decrement","data","fetchImages","splitArray","splice","toRememberShuffled","shuffle","toGuessShuffled","map","storedImage","hidden","error","time","stopTimer","clearInterval","startTimerAfterStart","setInterval","ContainerWithCards","useSelector","useDispatch","imgToRememberContainer","imageList","image","index","key","height","imgListItem","guessed","imgListItemFlip","pointerEvent","updatedArray","indexMap","selected","console","log","selectAnswer","backCard","width","transform","src","urls","raw","alt","backgroundPosition","frontCard","Timer","COLOR_CODES","info","color","warning","threshold","alert","timeLeft","useEffect","baseTimer","baseTimer__svg","viewBox","xmlns","baseTimer__circle","baseTimer__path__elapsed","cx","cy","r","strokeDasharray","rawTimeFraction","timeFraction","toFixed","baseTimer__path__remaining","remainingPathColor","d","baseTimer__label","ContainerWithImageToFind","imageToGuessDisplayed","taskImgContainer","hideImg","showImg","Loader","background","timeout","GET","endpoint","a","fetch","response","json","getRandomPhotos","numberOfPhotos","getSearchedPhotos","Box","size","BgColorFront","fontSizeFront","paddingCenterFront","paddingCenterBack","textFront","BgColorBack","fontSizeBack","textBack","backgroundColor","fontSize","routes","isExact","component","useState","imageIndex","setImageIndex","totalResult","setTotalResult","gameLives","setGameLives","isLoading","setIsLoading","history","useHistory","makeTwoDigitTimer","n","nextImage","tempResult","clearValues","tempArray","length","prev","result","e","indexOf","reset","updatedGuessArray","id","updatedRemArray","itemsForMutating","condition","change","mutateImgArray","setTimeout","needIf","array","resetGame","firstRender","push","game","header","sizeSlider","event","target","timePassedTimer","minutes","Math","floor","seconds","changeTimeFormat","lives","gameContent","selectImg","buttonContainer","showBtn","hideBtn","nextContainer","bottomBtn","disabled","forEach","otherBtnContainer","to","homeLink","path","label","gameover","gamoverBtn","timestamp","setTimestamp","clickAction","results","timeResult","resultBtn","setValue","errorMsg","setErrorMsg","onClickRandom","localStorage","getItem","JSON","parse","onClickSearch","preventDefault","errors","start","startBox","boxTitle","boxRandom","boxSearch","searchForm","inputContainer","startInput","placeholder","startBtn","boxSize","numberOfImgSelect","settingsText","App","basename","window","location","pathname","route","exact","initialState","startTimer","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.00110a4e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"imgToRememberContainer\":\"ContainerWithCards_imgToRememberContainer__3iEVJ\",\"imageList\":\"ContainerWithCards_imageList__2onzD\",\"imgListItem\":\"ContainerWithCards_imgListItem__2kpG5\",\"backCard\":\"ContainerWithCards_backCard__2WI9t\",\"frontCard\":\"ContainerWithCards_frontCard__FKDkN\",\"selected\":\"ContainerWithCards_selected__2tnBB\",\"pointerEvent\":\"ContainerWithCards_pointerEvent__2LB1D\",\"imgListItemFlip\":\"ContainerWithCards_imgListItemFlip__-w4EQ\",\"showImg\":\"ContainerWithCards_showImg__2kxOc\",\"hideImg\":\"ContainerWithCards_hideImg__dxsCh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"timer\":\"Timer_timer__RB9b3\",\"baseTimer\":\"Timer_baseTimer__tnGye\",\"showImg\":\"Timer_showImg__CqwUe\",\"hideImg\":\"Timer_hideImg__2LDsW\",\"baseTimer__svg\":\"Timer_baseTimer__svg__3eBn1\",\"baseTimer__circle\":\"Timer_baseTimer__circle__2X1Wa\",\"baseTimer__path__elapsed\":\"Timer_baseTimer__path__elapsed__xTq_D\",\"baseTimer__path__remaining\":\"Timer_baseTimer__path__remaining__1EdYx\",\"green\":\"Timer_green__3CGXv\",\"orange\":\"Timer_orange__2r2xR\",\"red\":\"Timer_red__3lDWP\",\"baseTimer__label\":\"Timer_baseTimer__label__2L_a8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"showImg\":\"ContainerWithImageToFind_showImg__1Kiuw\",\"hideImg\":\"ContainerWithImageToFind_hideImg__pfeEu\",\"taskImgContainer\":\"ContainerWithImageToFind_taskImgContainer__39yJZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"imgListItem\":\"Box_imgListItem__ZXlty\",\"backCard\":\"Box_backCard__5fOr5\",\"frontCard\":\"Box_frontCard__22otc\",\"textFront\":\"Box_textFront__35wBD\",\"textBack\":\"Box_textBack__hcf3s\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"results\":\"Results_results__u0uG6\",\"resultBtn\":\"Results_resultBtn__20pGw\",\"timeResult\":\"Results_timeResult__2b1-q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"gameover\":\"Gameover_gameover__2HxNO\",\"gamoverBtn\":\"Gameover_gamoverBtn__IIzUm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"slider\":\"Slider_slider__3kVKd\",\"slideContainer\":\"Slider_slideContainer__366LI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"background\":\"Loader_background__3l4OY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Game_header__cRJ7d\",\"lives\":\"Game_lives__i9QGn\",\"sizeSlider\":\"Game_sizeSlider__35EtW\",\"timePassedTimer\":\"Game_timePassedTimer__XhQMy\",\"gameContent\":\"Game_gameContent__IRxmB\",\"hidden\":\"Game_hidden__3vMY-\",\"imgToRememberContainer\":\"Game_imgToRememberContainer__MfsaT\",\"imageList\":\"Game_imageList__3vX-O\",\"imgListItem\":\"Game_imgListItem__2cBvK\",\"backCard\":\"Game_backCard__22rSa\",\"frontCard\":\"Game_frontCard__3X7L5\",\"selected\":\"Game_selected__3PI3p\",\"pointerEvent\":\"Game_pointerEvent__D9lac\",\"imgListItemFlip\":\"Game_imgListItemFlip__z88Al\",\"showImg\":\"Game_showImg__w0gK1\",\"hideImg\":\"Game_hideImg__f7c28\",\"showBtn\":\"Game_showBtn__3np7_\",\"hideBtn\":\"Game_hideBtn__3ZLdw\",\"selectImg\":\"Game_selectImg__pTZ98\",\"buttonContainer\":\"Game_buttonContainer__3EVwy\",\"nextContainer\":\"Game_nextContainer__1aP-E\",\"otherBtnContainer\":\"Game_otherBtnContainer__3m_5G\",\"homeLink\":\"Game_homeLink__1FgWW\",\"bottomBtn\":\"Game_bottomBtn__2E4rD\",\"taskImgContainer\":\"Game_taskImgContainer__217F5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"start\":\"Start_start__1vGSj\",\"startBox\":\"Start_startBox__WsAOC\",\"boxTitle\":\"Start_boxTitle__1uePV\",\"boxSearch\":\"Start_boxSearch__3wjfg\",\"searchForm\":\"Start_searchForm__3-cer\",\"boxSize\":\"Start_boxSize__2fL1X\",\"numberOfImgSelect\":\"Start_numberOfImgSelect__1paz2\",\"startBtn\":\"Start_startBtn__iTHL3\",\"startInput\":\"Start_startInput__TNbUn\",\"inputContainer\":\"Start_inputContainer__1-awu\",\"settingsText\":\"Start_settingsText__1Ck9s\"};","import { Slider } from './Slider'\nexport default Slider\n","import React from 'react'\nimport classes from './Slider.module.scss'\n\nexport const Slider = ({\n  children,\n  padding,\n  value,\n  min,\n  max,\n  step,\n  className,\n  onChange,\n  classNameText\n}) => {\n  return (\n    <>\n      <div\n        className={`${classes.slideContainer} ${className}`}\n        style={{ padding: padding }}\n      >\n        <input\n          type=\"range\"\n          min={min}\n          max={max}\n          step={step}\n          className={classes.slider}\n          value={value}\n          onChange={onChange}\n        />\n        <p className={classNameText}>\n          {children} {value}\n        </p>\n      </div>\n    </>\n  )\n}\n","import { Button } from './Button'\nexport default Button\n","import React from 'react'\nimport classes from './Button.module.scss'\n\nexport const Button = ({ children, className, onClick }) => {\n  return (\n    <>\n      <button className={`${classes.button} ${className}`} onClick={onClick}>\n        {children}\n      </button>\n    </>\n  )\n}\n","export const getNumberOfImg = state => state.gameOptions.numberOfImg\nexport const getTimePassedAfterStart = state => state.timer.timePassedAfterStart\nexport const getTimePassedAfterFlip = state => state.timer.timePassedAfterFlip\nexport const getStartTimer = state => state.timer.startTimer\nexport const getSizeOfImg = state => state.gameOptions.sizeOfImg\nexport const getGameMode = state => state.gameOptions.gameMode\nexport const getSearchValue = state => state.gameOptions.searchValue\nexport const getToRememberImgArray = state =>\n  state.gameOptions.toRememberImgArray\nexport const getToGuessImgArray = state => state.gameOptions.toGuessImgArray\nexport const getDataFetched = state => state.gameOptions.dataFetched\nexport const getSecondsToRemember = state => state.timer.secondsToRemember\nexport const getTimerEnd = state => state.timer.timerEnd\nexport const getFlipCards = state => state.gameOptions.flipCards\nexport const getSelectionCounter = state => state.gameOptions.selectionCounter\n","import * as actionTypes from './actionTypes'\n\nexport const setGameModeAction = newData => ({\n  type: actionTypes.SET_GAMEMODE,\n  newData\n})\n\nexport const setDataFetchedAction = newData => ({\n  type: actionTypes.REPLACE_DATA_FETCHED,\n  newData\n})\nexport const setNumberOfImgAction = newData => ({\n  type: actionTypes.REPLACE_NUMBER_OF_IMG,\n  newData\n})\nexport const setSearchValueAction = newData => ({\n  type: actionTypes.REPLACE_SEARCH_VALUE,\n  newData\n})\nexport const setSecondsToRememberAction = newData => ({\n  type: actionTypes.REPLACE_SECONDS_TO_REMEMBER,\n  newData\n})\nexport const setSizeOfImgAction = newData => ({\n  type: actionTypes.REPLACE_SIZE_OF_IMG,\n  newData\n})\n\nexport const setStartTimerAction = newData => ({\n  type: actionTypes.REPLACE_START_TIMER,\n  newData\n})\nexport const setToGuessImgArrayAction = newData => ({\n  type: actionTypes.REPLACE_TO_GUESS_IMG_ARRAY,\n  newData\n})\nexport const setToRememberImgArrayAction = newData => ({\n  type: actionTypes.REPLACE_TO_REMEMBER_IMG_ARRAY,\n  newData\n})\nexport const setTimerEndAction = newData => ({\n  type: actionTypes.REPLACE_TIMER_END,\n  newData\n})\nexport const setFlipCards = newData => ({\n  type: actionTypes.REPLACE_FLIP_CARDS,\n  newData\n})\n","export const REPLACE_DATA_FETCHED = 'REPLACE_DATA_FETCHED'\nexport const SET_GAMEMODE = 'SET_GAMEMODE'\nexport const REPLACE_NUMBER_OF_IMG = 'REPLACE_NUMBER_OF_IMG'\nexport const REPLACE_SEARCH_VALUE = 'REPLACE_SEARCH_VALUE'\nexport const REPLACE_SECONDS_TO_REMEMBER = 'REPLACE_SECONDS_TO_REMEMBER'\nexport const REPLACE_SIZE_OF_IMG = 'REPLACE_SIZE_OF_IMG'\nexport const REPLACE_TIME_PASSED_AFTER_FLIP = 'REPLACE_TIME_PASSED_AFTER_FLIP'\nexport const REPLACE_TIME_PASSED_AFTER_START = 'REPLACE_TIME_PASSED_AFTER_START'\nexport const REPLACE_START_TIMER = 'REPLACE_START_TIMER'\nexport const REPLACE_TO_GUESS_IMG_ARRAY = 'REPLACE_TO_GUESS_IMG_ARRAY'\nexport const REPLACE_TO_REMEMBER_IMG_ARRAY = 'REPLACE_TO_REMEMBER_IMG_ARRAY'\nexport const REPLACE_TIMER_END = 'REPLACE_TIMER_END'\nexport const REPLACE_FLIP_CARDS = 'REPLACE_FLIP_CARDS'\nexport const REPLACE_SELECTION_COUNTER = 'REPLACE_SELECTION_COUNTER'\n","import {\n  setToRememberImgArrayAction,\n  setToGuessImgArrayAction,\n  setDataFetchedAction,\n  setStartTimerAction\n} from './actionCreators'\nimport shuffle from 'lodash.shuffle'\nimport * as actionTypes from './actionTypes'\n\n// export const saveInfo = (toRememberImgArray, toGuessImgArray) => {\n//   const parsed = JSON.stringify(toGuessImgArray)\n//   localStorage.setItem('toGuessImg', parsed)\n//   const parsed2 = JSON.stringify(toRememberImgArray)\n//   localStorage.setItem('toRememberImg', parsed2)\n// }\n\nexport const setTimePassedAfterFlipAction = newData => (dispatch, getState) => {\n  const { timePassedAfterFlip } = getState().timer\n\n  let data = newData === 1 ? timePassedAfterFlip + 1 : 0\n\n  dispatch({\n    type: actionTypes.REPLACE_TIME_PASSED_AFTER_FLIP,\n    newData: data\n  })\n}\n\nexport const setTimePassedAfterStartAction = newData => (\n  dispatch,\n  getState\n) => {\n  const { timePassedAfterStart } = getState().timer\n  let data = newData === 1 ? timePassedAfterStart + 1 : 0\n  dispatch({\n    type: actionTypes.REPLACE_TIME_PASSED_AFTER_START,\n    newData: data\n  })\n}\n\nexport const setSelectionCounterAction = (newData, increment, decrement) => (\n  dispatch,\n  getState\n) => {\n  let data\n  const { selectionCounter } = getState().gameOptions\n  if (increment) {\n    data = selectionCounter + 1\n  }\n  if (decrement) {\n    data = selectionCounter - 1\n  }\n  if (newData === 0) {\n    data = newData\n  }\n  dispatch({\n    type: actionTypes.REPLACE_SELECTION_COUNTER,\n    newData: data\n  })\n}\n\nexport const fetchImages = data => (dispatch, getState) => {\n  const { numberOfImg } = getState().gameOptions\n  try {\n    const splitArray = data.splice(numberOfImg / 2)\n    const toRememberShuffled = shuffle([...data, ...data])\n    const toGuessShuffled = shuffle([...data, ...splitArray]).map(\n      storedImage => {\n        return {\n          ...storedImage,\n          hidden: false\n        }\n      }\n    )\n    dispatch(setToRememberImgArrayAction(toRememberShuffled))\n    dispatch(setToGuessImgArrayAction(toGuessShuffled))\n    dispatch(setDataFetchedAction(true))\n\n    // saveInfo(toRememberShuffled, toGuessShuffled) // localstorage turned off/on\n    return true\n  } catch (error) {\n    return false\n  }\n}\n\nlet time = 0\n\nexport const stopTimer = () => {\n  clearInterval(time)\n}\n\nexport const startTimerAfterStart = () => dispatch => {\n  stopTimer()\n  time = 0\n  time = setInterval(() => dispatch(setTimePassedAfterStartAction(1)), 1000)\n  dispatch(setStartTimerAction(time))\n}\n\nexport const startTimerAfterFlip = () => dispatch => {\n  stopTimer()\n  dispatch(setTimePassedAfterFlipAction(0))\n  time = setInterval(() => dispatch(setTimePassedAfterFlipAction(1)), 1000)\n  dispatch(setStartTimerAction(time))\n}\n","import { ContainerWithCards } from './ContainerWithCards'\nexport default ContainerWithCards\n","import React from 'react'\nimport classes from './ContainerWithCards.module.scss'\nimport {\n  getToRememberImgArray,\n  getSizeOfImg,\n  getFlipCards,\n  getSelectionCounter,\n  getNumberOfImg\n} from '../../redux/selectors'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { setToRememberImgArrayAction } from '../../redux/actionCreators'\nimport { setSelectionCounterAction } from '../../redux/actions'\n\nexport const ContainerWithCards = () => {\n  const toRememberImgArray = useSelector(getToRememberImgArray)\n  const sizeOfImg = useSelector(getSizeOfImg)\n  const flipCards = useSelector(getFlipCards)\n  const selectionCounter = useSelector(getSelectionCounter)\n  const numberOfImg = useSelector(getNumberOfImg)\n\n  const dispatch = useDispatch()\n\n  // const rowlength = Math.floor(\n  //   document.body.clientWidth / sizeOfImg\n  // )\n  // console.log('rowlength', rowlength)\n\n  const selectAnswer = (image, index) => {\n    const updatedArray = toRememberImgArray.map((storedImage, indexMap) => {\n      if (\n        index === indexMap &&\n        selectionCounter <= 1 &&\n        !storedImage.selected\n      ) {\n        dispatch(setSelectionCounterAction(null, true))\n        console.log('selected', toRememberImgArray)\n        console.log('counter', selectionCounter)\n\n        return {\n          ...storedImage,\n          selected: true\n        }\n      }\n      if (storedImage.selected && index !== indexMap) {\n        return storedImage\n      }\n      if (storedImage.selected && index === indexMap) {\n        dispatch(setSelectionCounterAction(null, false, true))\n        return {\n          ...storedImage,\n          selected: false\n        }\n      }\n      return { ...storedImage, selected: false }\n    })\n    dispatch(setToRememberImgArrayAction(updatedArray))\n  }\n\n  return (\n    <div className={classes.imgToRememberContainer}>\n      <ul className={classes.imageList}>\n        {toRememberImgArray.map((image, index) => (\n          // {index===7&&<br>}\n          <li key={index}>\n            <div\n              style={{ height: sizeOfImg + 'px' }}\n              className={`${classes.imgListItem}\n                  ${\n                    flipCards && !image.guessed ? classes.imgListItemFlip : ''\n                  } ${!flipCards || image.guessed ? classes.pointerEvent : ''}`}\n              onClick={() => selectAnswer(image, index)}\n            >\n              <div\n                className={classes.backCard}\n                style={{\n                  height: sizeOfImg + 'px',\n                  width: sizeOfImg + 'px',\n                  transform: ' translateZ(' + sizeOfImg / 2 + 'px)'\n                }}\n              >\n                <img\n                  src={\n                    image.urls.raw +\n                    '&fit=crop&w=' +\n                    sizeOfImg +\n                    '&h=' +\n                    sizeOfImg\n                  }\n                  alt=\"\"\n                />\n              </div>\n              <div\n                style={{\n                  height: sizeOfImg + 'px',\n                  width: sizeOfImg + 'px',\n                  transform:\n                    'rotateX(-90deg) translateZ(-' + sizeOfImg / 2 + 'px)',\n                  backgroundPosition: `${(100 / numberOfImg) * index}% ${(100 /\n                    numberOfImg) *\n                    index}%`\n                }}\n                className={`${classes.frontCard}\n                        ${image.selected && classes.selected}\n                      `}\n              ></div>\n            </div>\n          </li>\n        ))}\n      </ul>\n    </div>\n  )\n}\n","import { Timer } from './Timer'\nexport default Timer\n","import React, { useEffect } from 'react'\nimport classes from './Timer.module.scss'\nimport {\n  getSecondsToRemember,\n  getTimePassedAfterStart,\n  getTimerEnd\n} from '../../redux/selectors'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { setTimerEndAction } from '../../redux/actionCreators'\nimport {\n  stopTimer,\n  setTimePassedAfterStartAction,\n  setTimePassedAfterFlipAction\n} from '../../redux/actions'\n\nexport const Timer = ({ className }) => {\n  const secondsToRemember = useSelector(getSecondsToRemember)\n  const timePassedAfterStart = useSelector(getTimePassedAfterStart)\n  const timerEnd = useSelector(getTimerEnd)\n  const dispatch = useDispatch()\n  const FULL_DASH_ARRAY = 283\n  const WARNING_THRESHOLD = 10\n  const ALERT_THRESHOLD = 5\n\n  const COLOR_CODES = {\n    info: {\n      color: '#48a56a'\n    },\n    warning: {\n      color: '#d8ad4e',\n      threshold: WARNING_THRESHOLD\n    },\n    alert: {\n      color: '#ff6860',\n      threshold: ALERT_THRESHOLD\n    }\n  }\n\n  const onTimesUp = () => dispatch => {\n    stopTimer()\n    dispatch(setTimerEndAction(true))\n  }\n\n  const timeLeft = () => {\n    if (!timerEnd) {\n      const time = secondsToRemember - timePassedAfterStart\n\n      if (time === 0) {\n        dispatch(onTimesUp())\n      } else {\n        return time\n      }\n    }\n  }\n\n  const timeFraction = () => {\n    const rawTimeFraction = timeLeft() / secondsToRemember\n    return rawTimeFraction - (1 / secondsToRemember) * (1 - rawTimeFraction)\n  }\n\n  const circleDasharray = () =>\n    `${(timeFraction() * FULL_DASH_ARRAY).toFixed(0)} 283`\n\n  const remainingPathColor = () => {\n    const { alert, warning, info } = COLOR_CODES\n    if (timeLeft() <= alert.threshold) {\n      return alert.color\n    } else if (timeLeft() <= warning.threshold) {\n      return warning.color\n    } else {\n      return info.color\n    }\n  }\n\n  useEffect(() => {\n    dispatch(setTimePassedAfterStartAction(0))\n    dispatch(setTimePassedAfterFlipAction(0))\n  }, [])\n\n  return (\n    <>\n      <div className={`${classes.baseTimer} ${className}`}>\n        <svg\n          className={classes.baseTimer__svg}\n          viewBox=\"0 0 100 100\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <g className={classes.baseTimer__circle}>\n            <circle\n              className={classes.baseTimer__path__elapsed}\n              cx=\"50\"\n              cy=\"50\"\n              r=\"45\"\n            ></circle>\n            <path\n              strokeDasharray={circleDasharray()}\n              className={`${classes.baseTimer__path__remaining}`}\n              style={{ color: remainingPathColor() }}\n              d=\"\n            M 50, 50\n            m -45, 0\n            a 45,45 0 1,0 90,0\n            a 45,45 0 1,0 -90,0\n          \"\n            ></path>\n          </g>\n        </svg>\n        <span className={classes.baseTimer__label}>{timeLeft()}</span>\n      </div>\n    </>\n  )\n}\n","import { ContainerWithImageToFind } from './ContainerWithImageToFind'\nexport default ContainerWithImageToFind\n","import React from 'react'\nimport classes from './ContainerWithImageToFind.module.scss'\nimport { useSelector } from 'react-redux'\nimport { getFlipCards } from '../../redux/selectors'\nimport Timer from '../Timer'\n\nexport const ContainerWithImageToFind = ({ imageToGuessDisplayed }) => {\n  const flipCards = useSelector(getFlipCards)\n\n  return (\n    <>\n      <div className={classes.taskImgContainer}>\n        <div style={{ height: 200 + 'px' }}>\n          <Timer\n            className={`${flipCards && classes.hideImg} ${\n              !flipCards && classes.showImg\n            }`}\n          />\n        </div>\n        <img\n          className={`${flipCards && classes.showImg} ${\n            !flipCards && classes.hideImg\n          }`}\n          src={imageToGuessDisplayed.urls.raw + '&fit=crop&w=200&h=200'}\n          alt=\"\"\n        />\n      </div>\n    </>\n  )\n}\n","import { Loader } from './Loader'\nexport default Loader\n","import React from 'react'\nimport classes from './Loader.module.scss'\nimport Spinner from 'react-loader-spinner'\n\nexport const Loader = () => {\n  return (\n    <div className={classes.background}>\n      <Spinner\n        type=\"CradleLoader\"\n        color=\"#00BFFF\"\n        height={600}\n        width={600}\n        timeout={2000}\n      />\n    </div>\n  )\n}\n","// import { setIsLoading } from './redux/actionCreators'\n// import { useDispatch } from 'react-redux'\n// import store from './redux/store';\n\nconst baseUrl = 'https://api.unsplash.com/photos'\n\nexport const GET = async endpoint => {\n  const response = await fetch(baseUrl + endpoint)\n  return await response.json()\n}\n\nexport const getRandomPhotos = async numberOfPhotos => {\n  // const state = store.getState();\n  // dispatch(setIsLoading(true))\n  return await GET(\n    `/random?client_id=KdhCvP8tXfN1Byw49YkwKeDjHe5oa8fpZS2YGgmTYIM&count=${numberOfPhotos}`\n  )\n}\n\nexport const getSearchedPhotos = async (numberOfPhotos, searchValue) => {\n  // const state = store.getState();\n  // dispatch(setIsLoading(true))\n  return await GET(\n    `/random?client_id=KdhCvP8tXfN1Byw49YkwKeDjHe5oa8fpZS2YGgmTYIM&count=${numberOfPhotos}&query=${searchValue}`\n  )\n}\n","import { Box } from './Box'\nexport default Box\n","import React from 'react'\nimport classes from './Box.module.scss'\n\nexport const Box = ({\n  children,\n  size,\n  BgColorFront,\n  fontSizeFront,\n  paddingCenterFront,\n  paddingCenterBack,\n  textFront,\n  BgColorBack,\n  fontSizeBack,\n  textBack,\n  className,\n  onClick\n}) => {\n  return (\n    <>\n      <div\n        className={`${classes.imgListItem} ${className}`}\n        style={{ height: size + 'px' }}\n      >\n        <div\n          className={classes.backCard}\n          style={{\n            height: size + 'px',\n            width: size + 'px',\n            transform: ' translateZ(' + size / 2 + 'px)',\n            backgroundColor: BgColorFront,\n            fontSize: fontSizeFront\n          }}\n        >\n          <p\n            className={classes.textFront}\n            style={{ padding: paddingCenterFront }}\n          >\n            {textFront}\n          </p>\n        </div>\n        <div\n          className={classes.frontCard}\n          style={{\n            height: size + 'px',\n            width: size + 'px',\n            transform: 'rotateX(-90deg) translateZ(-' + size / 2 + 'px)',\n            backgroundColor: BgColorBack,\n            fontSize: fontSizeBack\n          }}\n          onClick={onClick}\n        >\n          <p\n            className={classes.textBack}\n            style={{ padding: paddingCenterBack }}\n          >\n            {textBack}\n          </p>\n          {children}\n        </div>\n      </div>\n    </>\n  )\n}\n","import { Game } from './pages/Game/Game'\nimport { Gameover } from './pages/Gameover/Gameover'\nimport { Results } from './pages/Results/Results'\nimport { Start } from './pages/Start/Start'\n\nexport const routes = [\n  { isExact: true, component: Game, path: '/game', label: 'Game' },\n  { isExact: true, component: Gameover, path: '/gameover', label: 'Gameover' },\n  { isExact: true, component: Results, path: '/results', label: 'Results' },\n  { isExact: true, component: Start, path: '/', label: 'Start' }\n]\n","import React, { useEffect, useState } from 'react'\nimport classes from './Game.module.scss'\nimport Slider from '../../components/Slider'\nimport Button from '../../components/Button'\nimport { Link } from 'react-router-dom'\nimport {\n  getToGuessImgArray,\n  getTimePassedAfterFlip,\n  getToRememberImgArray,\n  getSizeOfImg,\n  getDataFetched,\n  getTimerEnd,\n  getFlipCards,\n  getSelectionCounter,\n} from '../../redux/selectors'\nimport { useSelector, useDispatch } from 'react-redux'\nimport {\n  setToRememberImgArrayAction,\n  setToGuessImgArrayAction,\n  setSizeOfImgAction,\n  setTimerEndAction,\n  setFlipCards,\n} from '../../redux/actionCreators'\nimport { useHistory } from 'react-router-dom'\nimport {\n  startTimerAfterStart,\n  startTimerAfterFlip,\n  stopTimer,\n  setSelectionCounterAction,\n  setTimePassedAfterStartAction,\n  setTimePassedAfterFlipAction,\n} from '../../redux/actions'\nimport ContainerWithCards from '../../components/ContainerWithCards'\nimport ContainerWithImageToFind from '../../components/ContainerWithImageToFind'\nimport Loader from '../../components/Loader'\n\nexport const Game = () => {\n  const [imageIndex, setImageIndex] = useState(0)\n  const [totalResult, setTotalResult] = useState(0)\n  const [gameLives, setGameLives] = useState(3)\n  const [isLoading, setIsLoading] = useState(true)\n\n  const toGuessImgArray = useSelector(getToGuessImgArray)\n  const timePassedAfterFlip = useSelector(getTimePassedAfterFlip)\n  const toRememberImgArray = useSelector(getToRememberImgArray)\n  const sizeOfImg = useSelector(getSizeOfImg)\n  const dataFetched = useSelector(getDataFetched)\n  const timerEnd = useSelector(getTimerEnd)\n  const flipCards = useSelector(getFlipCards)\n  const selectionCounter = useSelector(getSelectionCounter)\n\n  const history = useHistory()\n  const dispatch = useDispatch()\n\n  const imageToGuessDisplayed = () => {\n    return toGuessImgArray[imageIndex]\n  }\n\n  const makeTwoDigitTimer = (n) => (n < 10 ? '0' : '') + n\n\n  const changeTimeFormat = () => {\n    const minutes = Math.floor(timePassedAfterFlip / 60)\n    const seconds = timePassedAfterFlip % 60\n    return `${makeTwoDigitTimer(minutes)}:${makeTwoDigitTimer(seconds)}`\n  }\n\n  const nextImage = (tempResult) => {\n    if (tempResult === 2) {\n      clearValues(2)\n    } else {\n      dispatch(setSelectionCounterAction(0))\n      const tempArray = toRememberImgArray.map((storedImage) => {\n        return {\n          ...storedImage,\n          selected: false,\n        }\n      })\n      dispatch(setToRememberImgArrayAction(tempArray))\n    }\n    if (\n      imageIndex < toGuessImgArray.length - 1 &&\n      !toGuessImgArray[imageIndex + 1].hidden\n    ) {\n      setImageIndex((prev) => prev + 1)\n    } else if (\n      imageIndex < toGuessImgArray.length - 1 &&\n      toGuessImgArray[imageIndex + 1].hidden\n    ) {\n      const result = toGuessImgArray.map((e) => e.hidden)\n      setImageIndex(() => result.indexOf(false, imageIndex + 1))\n    } else if (!toGuessImgArray[0].hidden) {\n      setImageIndex(0)\n    } else {\n      const result = toGuessImgArray.map((e) => e.hidden)\n      setImageIndex(() => result.indexOf(false))\n    }\n    if (imageIndex === -1) {\n      const result = toGuessImgArray.map((e) => e.hidden)\n      setImageIndex(() => result.indexOf(false))\n    }\n  }\n\n  const clearValues = (tempResult, reset) => {\n    if (reset) {\n      dispatch(setSelectionCounterAction(0))\n      const tempArray = toRememberImgArray.map((storedImage) => {\n        return {\n          ...storedImage,\n          selected: false,\n          guessed: false,\n        }\n      })\n      dispatch(setToRememberImgArrayAction(tempArray))\n    } else {\n      if (tempResult === 2) {\n        const updatedGuessArray = toGuessImgArray.map((storedImage) => {\n          if (storedImage.id === imageToGuessDisplayed().id) {\n            return {\n              ...storedImage,\n              hidden: true,\n            }\n          }\n          return storedImage\n        })\n        dispatch(setToGuessImgArrayAction(updatedGuessArray))\n        const updatedRemArray = toRememberImgArray.map((storedImage) => {\n          if (storedImage.selected === true) {\n            return {\n              ...storedImage,\n              guessed: true,\n              selected: false,\n            }\n          }\n          return {\n            ...storedImage,\n            selected: false,\n          }\n        })\n        dispatch(setToRememberImgArrayAction(updatedRemArray))\n        setTotalResult((prev) => prev + 2)\n        dispatch(setSelectionCounterAction(0))\n      } else {\n        const itemsForMutating = {\n          condition: ['selected', true],\n          change: ['guessed'],\n        }\n        mutateImgArray(true, toRememberImgArray, itemsForMutating)\n        setTimeout(() => {\n          mutateImgArray(true, toRememberImgArray, itemsForMutating)\n          dispatch(setSelectionCounterAction(0))\n          const tempArray = toRememberImgArray.map((storedImage) => {\n            return {\n              ...storedImage,\n              selected: false,\n            }\n          })\n          dispatch(setToRememberImgArrayAction(tempArray))\n        }, 600)\n      }\n    }\n  }\n\n  const mutateImgArray = (needIf, array, { condition, change }) => {\n    const tempArray = array.map((storedImage) => {\n      if (needIf ? storedImage[condition[0]] === condition[1] : true) {\n        return {\n          ...storedImage,\n          [change[0]]: !storedImage[change[0]],\n        }\n      }\n      return storedImage\n    })\n    if (array === toRememberImgArray) {\n      dispatch(setToRememberImgArrayAction(tempArray))\n    } else {\n      dispatch(setToGuessImgArrayAction(tempArray))\n    }\n  }\n\n  const failedAttempt = () => {\n    clearValues()\n    if (gameLives >= 0) {\n      setGameLives((gameLives) => gameLives - 1)\n    }\n  }\n\n  const checkSelection = () => {\n    let result = 0\n    toRememberImgArray.forEach((storedImage) => {\n      if (\n        storedImage.selected &&\n        storedImage.id === imageToGuessDisplayed().id\n      ) {\n        result += 1\n      }\n    })\n    result === 2 ? nextImage(2) : failedAttempt()\n  }\n\n  const resetGame = (firstRender) => {\n    dispatch(setTimerEndAction(false))\n    const tempArray = toRememberImgArray.map((storedImage) => {\n      return {\n        ...storedImage,\n        guessed: false,\n      }\n    })\n    dispatch(setToRememberImgArrayAction(tempArray))\n    const updatedGuessArray = toGuessImgArray.map((storedImage) => {\n      return {\n        ...storedImage,\n        hidden: false,\n      }\n    })\n    dispatch(setToGuessImgArrayAction(updatedGuessArray))\n    setGameLives(3)\n    dispatch(setFlipCards(false))\n    if (!firstRender) {\n      dispatch(setSelectionCounterAction(0))\n      setTotalResult(0)\n      setImageIndex(0)\n      dispatch(setTimePassedAfterStartAction(0))\n      dispatch(setTimePassedAfterFlipAction(0))\n      dispatch(startTimerAfterStart())\n    }\n  }\n\n  useEffect(() => {\n    dispatch(setTimerEndAction(false))\n    clearValues(null, true)\n    dispatch(setSelectionCounterAction(0))\n    setTotalResult(0)\n    setImageIndex(0)\n    resetGame(true)\n\n    toRememberImgArray.length !== 0 &&\n      setTimeout(\n        () => {\n          setIsLoading(false)\n          dispatch(startTimerAfterStart())\n        },\n        dataFetched ? 2000 : 0\n      )\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  useEffect(() => {\n    if (\n      toRememberImgArray.length !== 0 &&\n      toRememberImgArray.length === totalResult\n    ) {\n      dispatch(stopTimer)\n      history.push('/results')\n    }\n    if (toRememberImgArray.length === 0) {\n      dispatch(stopTimer)\n      history.push('/')\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [totalResult])\n\n  useEffect(() => {\n    if (gameLives < 1) {\n      dispatch(stopTimer)\n      history.push('/gameover')\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [gameLives])\n\n  useEffect(() => {\n    if (timerEnd) {\n      dispatch(setFlipCards(true))\n      dispatch(startTimerAfterFlip())\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [timerEnd])\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      <div className={classes.game}>\n        <div className={classes.header}>\n          <Slider\n            className={classes.sizeSlider}\n            min=\"50\"\n            max=\"300\"\n            step=\"1\"\n            value={sizeOfImg}\n            padding=\"0 10px\"\n            onChange={(event) =>\n              dispatch(setSizeOfImgAction(event.target.value))\n            }\n          >\n            Change size of cards:\n          </Slider>\n          <div className={classes.timePassedTimer}>\n            <div>{changeTimeFormat()}</div>\n          </div>\n          <div className={classes.lives}>\n            <p>Tries left</p>\n            {gameLives}\n          </div>\n        </div>\n        {toRememberImgArray.length !== 0 && toGuessImgArray.length !== 0 && (\n          <div\n            className={`${classes.gameContent} ${isLoading && classes.hidden}`}\n          >\n            <ContainerWithCards />\n            <div className={classes.selectImg}>\n              <ContainerWithImageToFind\n                imageToGuessDisplayed={toGuessImgArray[imageIndex]}\n              />\n\n              <div\n                className={`${classes.buttonContainer} ${\n                  flipCards && classes.showBtn\n                } ${!flipCards && classes.hideBtn}`}\n              >\n                <div className={classes.nextContainer}>\n                  {selectionCounter !== 2 && (\n                    <Button className={classes.bottomBtn} onClick={nextImage}>\n                      NEXT IMAGE\n                    </Button>\n                  )}\n                  {selectionCounter === 2 && (\n                    <Button\n                      className={classes.bottomBtn}\n                      disabled={selectionCounter !== 2}\n                      onClick={checkSelection}\n                    >\n                      CHECK\n                    </Button>\n                  )}\n                </div>\n                <div className={classes.otherBtnContainer}>\n                  <Button\n                    className={classes.bottomBtn}\n                    onClick={() => resetGame(false)}\n                  >\n                    RESET GAME\n                  </Button>\n                  <Link to=\"/\" className={classes.homeLink}>\n                    <Button className={classes.bottomBtn}>HOME</Button>\n                  </Link>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </>\n  )\n}\n","import React from 'react'\nimport classes from './Gameover.module.scss'\nimport Button from '../../components/Button'\nimport { Link } from 'react-router-dom'\nimport { fetchImages } from '../../redux/actions'\nimport { useEffect } from 'react'\nimport { useDispatch } from 'react-redux'\nimport {\n  setTimerEndAction,\n  setDataFetchedAction,\n} from '../../redux/actionCreators'\n\nexport const Gameover = () => {\n  const dispatch = useDispatch()\n  useEffect(() => {\n    dispatch(setTimerEndAction(false))\n    dispatch(setDataFetchedAction(false))\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n  return (\n    <>\n      <div className={classes.gameover}>\n        <h1>GAME OVER!</h1>\n        <Link to=\"/game\">\n          <Button className={classes.gamoverBtn} onClick={fetchImages}>\n            TRY AGAIN\n          </Button>\n        </Link>\n        <Link to=\"/\">\n          <Button className={classes.gamoverBtn}>HOME</Button>\n        </Link>\n      </div>\n    </>\n  )\n}\n","import React, { useState, useEffect } from 'react'\nimport classes from './Results.module.scss'\nimport { fetchImages } from '../../redux/actions'\nimport { Link } from 'react-router-dom'\nimport Button from '../../components/Button'\nimport {\n  getTimePassedAfterFlip,\n  getGameMode,\n  getNumberOfImg,\n  getSearchValue,\n} from '../../redux/selectors'\nimport { useSelector } from 'react-redux'\nimport { useDispatch } from 'react-redux'\nimport { setTimerEndAction } from '../../redux/actionCreators'\nimport { getSearchedPhotos, getRandomPhotos } from '../../api'\n\nexport const Results = () => {\n  const [timestamp, setTimestamp] = useState(0)\n  const timePassedAfterFlip = useSelector(getTimePassedAfterFlip)\n  const gameMode = useSelector(getGameMode)\n  const numberOfImg = useSelector(getNumberOfImg)\n  const searchValue = useSelector(getSearchValue)\n  const dispatch = useDispatch()\n\n  const makeTwoDigitTimer = (n) => (n < 10 ? '0' : '') + n\n\n  const clickAction = async () => {\n    if (gameMode === 'search') {\n      const data = await getSearchedPhotos(numberOfImg, searchValue)\n      dispatch(fetchImages(data))\n    } else if (gameMode === 'random') {\n      const data = await getRandomPhotos(numberOfImg)\n      dispatch(fetchImages(data))\n    }\n  }\n  useEffect(() => {\n    const minutes = Math.floor(timePassedAfterFlip / 60)\n    const seconds = timePassedAfterFlip % 60\n    setTimestamp(`${makeTwoDigitTimer(minutes)}:${makeTwoDigitTimer(seconds)}`)\n    dispatch(setTimerEndAction(false))\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n  return (\n    <>\n      <div className={classes.results}>\n        <h1>Congrats!</h1>\n        <div className={classes.timeResult}>\n          <h1>Your time is {timestamp}</h1>\n        </div>\n        <Link to=\"/game\">\n          <Button className={classes.resultBtn} onClick={clickAction}>\n            TRY AGAIN\n          </Button>\n        </Link>\n        <Link to=\"/\">\n          <Button className={classes.resultBtn}>HOME</Button>\n        </Link>\n      </div>\n    </>\n  )\n}\n","import React, { useState, useEffect } from 'react'\nimport classes from './Start.module.scss'\nimport Box from '../../components/Box'\nimport Button from '../../components/Button'\nimport Slider from '../../components/Slider'\nimport { useSelector, useDispatch } from 'react-redux'\nimport {\n  getNumberOfImg,\n  getSearchValue,\n  getSecondsToRemember,\n} from '../../redux/selectors'\nimport {\n  setNumberOfImgAction,\n  setSearchValueAction,\n  setSecondsToRememberAction,\n  setGameModeAction,\n  setToRememberImgArrayAction,\n  setToGuessImgArrayAction,\n  setDataFetchedAction,\n  setTimerEndAction,\n} from '../../redux/actionCreators'\nimport { fetchImages } from '../../redux/actions'\nimport { getRandomPhotos, getSearchedPhotos } from '../../api'\nimport { useHistory } from 'react-router-dom'\n\nexport const Start = () => {\n  const dispatch = useDispatch()\n  const history = useHistory()\n  const [value, setValue] = useState('')\n  const [errorMsg, setErrorMsg] = useState(false)\n\n  const numberOfImg = useSelector(getNumberOfImg)\n  const searchValue = useSelector(getSearchValue)\n  const secondsToRemember = useSelector(getSecondsToRemember)\n\n  const onInput = (event) => {\n    setValue(event.target.value)\n    setErrorMsg(false)\n    dispatch(setSearchValueAction(event.target.value))\n  }\n\n  const onClickRandom = async () => {\n    if (localStorage.getItem('toRememberImg')) {\n      const data = JSON.parse(localStorage.getItem('toRememberImg'))\n      dispatch(setToRememberImgArrayAction(data))\n      const result = JSON.parse(localStorage.getItem('toGuessImg')).map(\n        (storedImage) => {\n          return {\n            ...storedImage,\n            hidden: false,\n          }\n        }\n      )\n      dispatch(setToGuessImgArrayAction(result))\n    } else {\n      dispatch(setGameModeAction('random'))\n      const data = await getRandomPhotos(numberOfImg)\n      dispatch(fetchImages(data))\n    }\n    history.push('/game')\n  }\n\n  const onClickSearch = async (event) => {\n    event.preventDefault()\n    if (value) {\n      const result = await getSearchedPhotos(numberOfImg, searchValue)\n      if (!result.errors) {\n        setErrorMsg(false)\n        dispatch(setGameModeAction('search'))\n        dispatch(setSearchValueAction(value))\n        dispatch(fetchImages(result))\n        history.push('/game')\n      } else {\n        setValue('')\n        setErrorMsg(true)\n      }\n    }\n  }\n\n  useEffect(() => {\n    dispatch(setSearchValueAction(''))\n    dispatch(setTimerEndAction(false))\n    dispatch(setDataFetchedAction(false))\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  return (\n    <>\n      <div className={classes.start}>\n        <Box\n          className={`${classes.startBox} ${classes.boxTitle}`}\n          size=\"300\"\n          textFront=\"catfish\"\n        ></Box>\n        <Box\n          className={`${classes.startBox} ${classes.boxRandom}`}\n          size=\"300\"\n          textFront=\"RANDOM\"\n          textBack=\"START\"\n          BgColorFront=\"#434364\"\n          BgColorBack=\"#742854\"\n          onClick={onClickRandom}\n        ></Box>\n        <Box\n          className={`${classes.startBox} ${classes.boxSearch}`}\n          size=\"300\"\n          textFront=\"SEARCH\"\n          BgColorFront=\"#ff6860\"\n          BgColorBack=\"#D8AD4E\"\n          paddingCenterBack=\"0\"\n        >\n          <form className={classes.searchForm}>\n            <div className={classes.inputContainer}>\n              <input\n                className={classes.startInput}\n                type=\"text\"\n                value={value}\n                placeholder={\n                  errorMsg\n                    ? 'Oops, nothing found. Try again'\n                    : 'Search for photos'\n                }\n                onChange={onInput}\n              />\n            </div>\n            <Button\n              className={classes.startBtn}\n              type=\"submit\"\n              onClick={onClickSearch}\n            >\n              SEARCH\n            </Button>\n          </form>\n        </Box>\n        <Box\n          className={`${classes.startBox} ${classes.boxSize}`}\n          size=\"300\"\n          textFront=\"SETTINGS\"\n          BgColorFront=\"rgb(23, 68, 116)\"\n          BgColorBack=\"#414141\"\n          paddingCenterBack=\"0\"\n        >\n          <Slider\n            className={classes.numberOfImgSelect}\n            min=\"4\"\n            max=\"30\"\n            step=\"2\"\n            value={numberOfImg}\n            classNameText={classes.settingsText}\n            onChange={(event) =>\n              dispatch(setNumberOfImgAction(event.target.value))\n            }\n          >\n            Number of cards:\n          </Slider>\n          <Slider\n            className={classes.secondsToRemember}\n            min=\"1\"\n            max=\"60\"\n            step=\"1\"\n            value={secondsToRemember}\n            classNameText={classes.settingsText}\n            onChange={(event) =>\n              dispatch(setSecondsToRememberAction(event.target.value))\n            }\n          >\n            Time to memorize:\n          </Slider>\n        </Box>\n      </div>\n    </>\n  )\n}\n","import React from 'react'\nimport './App.scss'\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\nimport { routes } from './routes'\n\nfunction App() {\n  return (\n    <BrowserRouter basename={window.location.pathname || ''}>\n      <main>\n        <Switch>\n          {routes.map((route, index) => (\n            <Route\n              key={index}\n              path={route.path}\n              component={() => <route.component />}\n              exact={route.isExact}\n            />\n          ))}\n        </Switch>\n      </main>\n    </BrowserRouter>\n  )\n}\n\nexport default App\n","import * as actionTypes from './actionTypes'\nconst initialState = {\n  toGuessImgArray: [],\n  toRememberImgArray: [],\n  dataFetched: false,\n  gameMode: null,\n  numberOfImg: 16,\n  searchValue: null,\n  sizeOfImg: '100',\n  flipCards: false,\n  selectionCounter: 0\n}\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.REPLACE_TO_GUESS_IMG_ARRAY:\n      return { ...state, toGuessImgArray: action.newData }\n    case actionTypes.REPLACE_TO_REMEMBER_IMG_ARRAY:\n      return { ...state, toRememberImgArray: action.newData }\n    case actionTypes.REPLACE_DATA_FETCHED:\n      return { ...state, dataFetched: action.newData }\n    case actionTypes.SET_GAMEMODE:\n      return { ...state, gameMode: action.newData }\n    case actionTypes.REPLACE_NUMBER_OF_IMG:\n      return { ...state, numberOfImg: action.newData }\n    case actionTypes.REPLACE_SEARCH_VALUE:\n      return { ...state, searchValue: action.newData }\n    case actionTypes.REPLACE_SIZE_OF_IMG:\n      return { ...state, sizeOfImg: action.newData }\n    case actionTypes.REPLACE_FLIP_CARDS:\n      return { ...state, flipCards: action.newData }\n    case actionTypes.REPLACE_SELECTION_COUNTER:\n      return { ...state, selectionCounter: action.newData }\n    default:\n      return state\n  }\n}\n","import * as actionTypes from './actionTypes'\nconst initialState = {\n  secondsToRemember: '15',\n  timePassedAfterFlip: 0,\n  timePassedAfterStart: 0,\n  timerEnd: false,\n  startTimer: null\n}\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.REPLACE_SECONDS_TO_REMEMBER:\n      return { ...state, secondsToRemember: action.newData }\n    case actionTypes.REPLACE_TIME_PASSED_AFTER_FLIP:\n      return { ...state, timePassedAfterFlip: action.newData }\n    case actionTypes.REPLACE_TIME_PASSED_AFTER_START:\n      return { ...state, timePassedAfterStart: action.newData }\n    case actionTypes.REPLACE_TIMER_END:\n      return { ...state, timerEnd: action.newData }\n    case actionTypes.REPLACE_START_TIMER:\n      return { ...state, startTimer: action.newData }\n    default:\n      return state\n  }\n}\n","import { createStore, combineReducers, applyMiddleware } from 'redux'\nimport reducerGameOptions from './reducer-gameOptions'\nimport reducerTimer from './reducer-timer'\nimport thunk from 'redux-thunk'\n\nconst rootReducer = combineReducers({\n  timer: reducerTimer,\n  gameOptions: reducerGameOptions\n})\n\nconst store = createStore(rootReducer, applyMiddleware(thunk))\n\nexport default store\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport { Provider } from 'react-redux'\nimport store from './redux/store'\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}